Termwork – 5A : Process Synchronization-Reader- writer and Producer –consumer Problem
Date : 10/03/2025

#include<stdio.h>
#include<semaphore.h>
#include<unistd.h>
#include<pthread.h>

sem_t rw_mutex; // Controls access to the shared resource
sem_t mutex;    // Controls access to reader_count
int reader_count = 0; // Number of active readers
int shared_data = 0;  // Shared resource

void* reader(void* arg) {
    int reader_id = *((int*)arg);
    while (1) {
        sem_wait(&mutex);
        reader_count++;
        if (reader_count == 1) {
            sem_wait(&rw_mutex); // First reader locks the resource
        }
        sem_post(&mutex);

        // Critical Section (Reading)
        printf("Reader %d: Read shared data = %d\n", reader_id, shared_data);
        usleep(500000); // Simulating reading time

        sem_wait(&mutex);
        reader_count--;
        if (reader_count == 0) {
            sem_post(&rw_mutex); // Last reader unlocks the resource
        }
        sem_post(&mutex);
        usleep(500000);
    }
    return NULL;
}

void* writer(void* arg) {
    int writer_id = *((int*)arg);
    while (1) {
        sem_wait(&rw_mutex); // Locks the resource exclusively

        // Critical Section (Writing)
        shared_data++; // Modify shared resource
        printf("Writer %d: Wrote shared data = %d\n", writer_id, shared_data);
        usleep(500000); // Simulate writing time

        sem_post(&rw_mutex); // Release the resource
        usleep(500000);
    }
    return NULL;
}

int main() {
    pthread_t r_threads[5], w_threads[2];
    int reader_ids[5] = {1, 2, 3, 4, 5};
    int writer_ids[2] = {1, 2}; // Corrected initialization of writer_ids

    sem_init(&rw_mutex, 0, 1);  // Initialize rw_mutex for exclusive access
    sem_init(&mutex, 0, 1);     // Initialize mutex for controlling reader_count

    // Create reader and writer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&r_threads[i], NULL, reader, &reader_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        pthread_create(&w_threads[i], NULL, writer, &writer_ids[i]);
    }

    // Join all threads (in practice, this won't be reachable due to infinite loops)
    for (int i = 0; i < 5; i++) {
        pthread_join(r_threads[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(w_threads[i], NULL);
    }

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}
 
Termwork – 5B : Process Synchronization Producer –consumer Problem
Date : 10/03/2025

#include<stdio.h>
#include<stdlib.h>
#include<semaphore.h>
#include<unistd.h>
#include<pthread.h>

#define BUFFER_SIZE 5 // Size of the buffer

int buffer[BUFFER_SIZE];
int in = 0, out = 0; // Indexes for producer and consumer

sem_t empty, full; // Semaphores for synchronization
pthread_mutex_t mutex; // Mutex for critical section

// Producer function
void* producer(void* arg) {
    int item = 1;
    while (1) {
        sleep(1); // Simulating production time
        sem_wait(&empty); // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock critical section

        // Produce an item
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;
        item++;

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&full); // Signal that buffer is not empty
    }
}

// Consumer function
void* consumer(void* arg) {
    while (1) {
        sleep(2); // Simulating consumption time
        sem_wait(&full); // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock critical section

        // Consume an item
        int item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&empty); // Signal that buffer has space
    }
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Join threads
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores and Mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
