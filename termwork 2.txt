Termwork – 2A : FCFS Scheduling Algorithm

/*
FCFS Scheduling Program in C
*/
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int pid[15];    
    int bt[15];      
    int n;           

    printf("Enter the number of processes: ");
    scanf("%d", &n);


    printf("Enter process id of all processes: ");
    for(int i = 0; i < n; i++) {
        scanf("%d", &pid[i]);
    }

    printf("Enter burst time of all the processes: ");
    for(int i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
    }

    int wt[n];       
    wt[0] = 0;       


    for(int i = 1; i < n; i++) {
        wt[i] = bt[i - 1] + wt[i - 1];
    }

    printf("Process ID\tBurst Time\tWaiting Time\tTurnaround Time\n");

    float twt = 0.0;  
    float ttt = 0.0;  

    for(int i = 0; i < n; i++) {
        int tat = bt[i] + wt[i]; // Turnaround time = BT + WT
        printf("%d\t\t%d\t\t%d\t\t%d\n", pid[i], bt[i], wt[i], tat);

        twt += wt[i];    
        ttt += tat;      
    }

    float awt = twt / n;  
    float att = ttt / n; 

    printf("Avg. waiting time = %.2f\n", awt);
    printf("Avg. turnaround time = %.2f\n", att);

    return 0;
}























Termwork – 2B : SJF Scheduling Algorithm

/*
SJF Scheduling Program in C
*/
#include <stdio.h>

int main() {
    int n, i, j;
    int bt[20], p[20], wt[20], tat[20];
    float total_wt = 0, total_tat = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

   
    for(i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
        p[i] = i + 1; // Process ID
    }

   
    for(i = 0; i < n - 1; i++) {
        for(j = i + 1; j < n; j++) {
            if(bt[i] > bt[j]) {
                // Swap burst time
                int temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;

                // Swap process ID
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    wt[0] = 0;
    tat[0] = bt[0];

 
    for(i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
        tat[i] = wt[i] + bt[i];
    }


    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for(i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", p[i], bt[i], wt[i], tat[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("\nAverage Waiting Time = %.2f", total_wt / n);
    printf("\nAverage Turnaround Time = %.2f\n", total_tat / n);

    return 0;
}

